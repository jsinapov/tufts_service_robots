# Distance units are meters. Arbitrarily, I want to collect new datapoints every 1 meter.
sample_distance: 1

# If start_point is specified, you should physically place the turtlebot at that location before launching this
# program. It should be near waypoint[0] but should not be waypoint[0]. The turtlebot will drive itself to waypoint[0].
# The turtlebot will assume yaw 0.
# If start_point is not specified, you must manually set initialpose via
# "roslaunch turtlebot_rviz_launchers view_navigation.launch" before launching traverse_map_by_waypoints.py.
start_point: hall2_adjacent_men_restroom

# topics: ['/camera/depth/image_raw', '/usb_cam/image_raw', '/amcl_pose']   # usb_cam for logitech external camera
# note to add: point cloud (look up depth_registered), scan topic (laser scan), add costmap topic 
topics: ['/camera/depth/image_raw', '/camera/rgb/image_raw', '/amcl_pose', '/people_tracker_measurements', 
          '/audio', '/audio/audio', '/particlecloud', '/move_base/global_costmap/costmap', '/scan' ]
# topics = ['/odom', '/clock']  # available in gazebo

# directory will be created if it does not exist
output_dir: '/home/turtlebot/data_collector_output'

poi_scan_num_stops: 8   # spin one full circle, stop this many times.
poi_scan_duration: 3.0  # sec
poi_scan_tune_rotation: 1.33  # arbitrarily, it seems to under-rotate by a ratio of about 3/4, so overrotate 4/3

poi_scan_upload_url: 'https://turtlecloud.eecs.tufts.edu/api/v1.0/rosbags/' # must include trailing /
poi_scan_rm_after_upload: True
poi_scan_upload_token: ''  # do NOT git commit.

# all spins will start and end by spinning to yaw=0. If this is set to true, one more spin will be done after
# the spinning data collection, return to the original orientation that the robot had before doing data_scan.
poi_scan_return_to_original_orientation: False

# If you have existing data, enter their coordinates, like:
#     existing_data: [ {x: 4.4, y: 5.5 }, {x: 4.3, y: 12.7} ]
#
# Equivalently, you could format it like this:
#     existing_data:
#       - {x: 4.4, y: 5.5 }
#       - {x: 4.3, y: 12.7}
#
# If you don't have existing data, use the empty list []
existing_data: []

# If there are locations that you want to definitely capture, even though there was already another capture
# nearby, list them here. You might want to do this, for example, if there's a small room that's surrounded by
# hallways that were captured, so technically there's a capture already nearby, but you want to capture it anyway
# due to the fact that the robot can't see through walls.
force_capture:
  - rm228_robotics_lab_adjacent_rm226_graduate_office

waypoints:
  - hall2_adjacent_men_restroom
  - hall2_adjacent_rm212_collaboration_room
  - rm226_graduate_office_adjacent_hall2
  - rm228_robotics_lab_adjacent_rm226_graduate_office
  - rm226_graduate_office_adjacent_hall2
  - hall2_adjacent_hall3_and_kitchenette
  - hall3_adjacent_rm227_simulation_lab
  - hall2_adjacent_hall3_and_kitchenette
  - hall2_adjacent_rm239_prof_diane_souvaine
  - elevator_adjacent_foyer
  - foyer_sitting_area
  - foyer_adjacent_rm245_main_office
  - foyer_sitting_area
  - hall1_adjacent_rm204_kitchenette
  - hall2_adjacent_hall3_and_kitchenette
  - hall1_adjacent_rm204_kitchenette
  - hall1_adjacent_rm212_collab_room
  - hall2_adjacent_rm212_collaboration_room
  - hall1_adjacent_rm212_collab_room
  - hall1_adjacent_rm215_prof_rob_jacob
